name: 'Build Docker Image'
description: 'Builds and pushes Docker images to Amazon ECR.'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  domain:
    description: 'Domain for docs'
    default: ''
    required: false
    type: string
  aws-default-region:
    description: 'AWS default region'
    required: true
    type: string
  image-target:
    description: 'Docker image target'
    required: true
    type: string
  project-path:
    description: 'Project path'
    required: false
    default: '.'
    type: string
  project-name:
    description: 'Project name for the Docker image'
    required: true
    type: string
  workspace-app:
    description: 'Workspace app path'
    required: true
    type: string
  docker-file:
    description: 'Path to Dockerfile'
    required: false
    default: 'dockerfile'
    type: string
  env-file:
    description: 'Path to environment file'
    required: false
    default: '.env.development'
    type: string
  push-image:
    description: 'Whether to push the image to ECR'
    required: false
    default: false
    type: boolean
  OUTPUT_DIST_DIR:
    description: 'output files'
    required: false
    default: 'out'
    type: string
  image-env:
    description: 'Environment for the image'
    required: false
    default: 'development'
    type: string
  AWS_ACCOUNT_ID:
    description: 'AWS Account ID'
    required: true
  AWS_ACCESS_KEY_ID:
    description: 'AWS Access Key ID'
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: 'AWS Secret Access Key'
    required: true
  REGION:
    description: 'AWS Region'
    required: true
  ENVIROMENT:
    description: 'Environment variable'
    required: false
  VERSION:
    description: 'Version variable'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout üõéÔ∏è
      uses: actions/checkout@v3

    - name: Configure AWS credentials üèÅ
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.REGION }}

    - name: Login to Amazon ECR üîë
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Prepare Tags üè∑
      id: prepare-tag
      shell: bash
      run: |
        TAG=$(echo $GITHUB_SHA)
        CONTAINER_REPOSITORY="${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.REGION }}.amazonaws.com/${{ inputs.project-name }}"
        echo "CONTAINER_IMAGE=${{ inputs.project-name }}:${{ inputs.image-env }}" >> $GITHUB_OUTPUT
        echo "CONTAINER_REPOSITORY=${CONTAINER_REPOSITORY}" >> $GITHUB_OUTPUT
        echo "IMAGE_CURRENT=${CONTAINER_REPOSITORY}:${{ inputs.image-env }}" >> $GITHUB_OUTPUT
        echo "IMAGE_CURRENT_COMMIT=${CONTAINER_REPOSITORY}:${TAG}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx üê≥
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Set env file üéì
      id: set-env
      shell: bash
      if: ${{ inputs.env-file != '' }}
      run: |
        ENV_PATH=''
        if [ "${{ inputs.workspace-app }}" != '' ]; then
          ENV_PATH=apps/${{ inputs.workspace-app }}
        fi
        ENV_FILE_PATH="./${{ inputs.project-path }}/${ENV_PATH}/.env"
        echo ${{ inputs.ENVIROMENT }} | base64 -d > ${ENV_FILE_PATH}
        echo "ENV_FILE_PATH=${ENV_FILE_PATH}" >> $GITHUB_OUTPUT

    - name: Get current NODE_ENV
      id: get_node_env
      shell: bash
      run: |
        NODE_ENV=`grep -oP 'NODE_ENV=\K\w+' ${{ steps.set-env.outputs.ENV_FILE_PATH }}`
        APP_ENV=`grep -oP 'APP_ENV=\K\w+' ${{ steps.set-env.outputs.ENV_FILE_PATH }}`
        if [ "${{ inputs.image-env }}" = 'TEST' ] || [ "${{ inputs.image-env }}" = 'test' ]; then
          NODE_ENV="test"
          APP_ENV="test"
        elif [ "$NODE_ENV" = '' ] ; then
          NODE_ENV="production"
          APP_ENV="production"
        fi
        echo "node_env=${NODE_ENV}" >> $GITHUB_OUTPUT
        echo "app_env=${APP_ENV}" >> $GITHUB_OUTPUT

    - name: Update package.json version
      shell: bash
      run: |
        PACKAGE_JSON_PATH="./apps/${{ inputs.workspace-app }}/package.json"
        if [ -f $PACKAGE_JSON_PATH ]; then
          echo "Updating $PACKAGE_JSON_PATH with version ${{ inputs.VERSION }}"
          jq --arg new_version "${{ inputs.VERSION }}" '.version = $new_version' $PACKAGE_JSON_PATH > tmp.$$.json && mv tmp.$$.json $PACKAGE_JSON_PATH
          cat $PACKAGE_JSON_PATH
        fi

    - name: Docs change domain TOCTOC
      shell: bash
      if: ${{ endsWith(inputs.project-name, '-docs') }}
      run: |
        sed -i "s|http://localhost:[0-9]*|https://${{ inputs.domain }}|g" ./apps/${{ inputs.workspace-app }}/public/index.html

    - name: Build and run target üêô
      uses: docker/build-push-action@v3
      with:
        context: ./${{ inputs.project-path }}
        push: ${{ inputs.push-image }}
        builder: ${{ steps.buildx.outputs.name }}
        file: ./${{ inputs.project-path }}/${{ inputs.docker-file }}
        target: ${{ inputs.image-target }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: |
          ${{ steps.prepare-tag.outputs.IMAGE_CURRENT }}
          ${{ steps.prepare-tag.outputs.IMAGE_CURRENT_COMMIT }}
        secret-files: |
          env=${{ steps.set-env.outputs.ENV_FILE_PATH }}
        build-args: |
          NODE_ENV=${{ steps.get_node_env.outputs.node_env }}
          APP_ENV=${{ steps.get_node_env.outputs.app_env }}
          WORKSPACE_APP=${{ inputs.workspace-app }}

    # - name: Extract Bundles üì§
    #   shell: bash
    #   if: ${{ (!endsWith(inputs.project-name, '-docs')) && (inputs.image-env == 'prod' || inputs.image-env == 'staging') }}
    #   run: |
    #     mkdir ${{ inputs.OUTPUT_DIST_DIR }} ; docker cp \
    #      $(docker create --rm ${{ steps.prepare-tag.outputs.IMAGE_CURRENT_COMMIT }}):/app/apps/frontend/.$NEXT_STATIC_PATH/ \
    #      ${{ inputs.OUTPUT_DIST_DIR }}

    # - name: Upload Extracted Bundles üì¶
    #   if: ${{ (!endsWith(inputs.project-name, '-docs')) && (inputs.image-env == 'prod' || inputs.image-env == 'staging') }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: static-bundle
    #     path: ${{ inputs.OUTPUT_DIST_DIR }}

    - name: Logout of Amazon ECR üö™
      shell: bash
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
